# Generated by Django 2.2 on 2019-04-08 15:49

import datetime
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import timezone_field.fields
import website.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(error_messages={'unique': 'A user with that email address already exists.'}, max_length=254, unique=True, verbose_name='email address')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('isEmailConfirmed', models.BooleanField(default=False, verbose_name='Email address confirmed')),
                ('userType', models.SmallIntegerField(choices=[(0, 'School Administrator'), (1, 'Teacher'), (2, 'Student')], verbose_name='User type')),
                ('defaultLocation', models.CharField(default='unspecified', max_length=200, verbose_name='Default location for meetings')),
                ('minAppointmentTimespan', models.DurationField(default=datetime.timedelta(0), verbose_name='Enforced minimum meeting duration')),
                ('maxAppointmentTimespan', models.DurationField(default=datetime.timedelta(0, 43200), verbose_name='Enforced maximum meeting duration')),
                ('showUnavailability', models.BooleanField(default=False, verbose_name='Show to students when I am unavailable')),
                ('isTeacherApprovedByAdministrator', models.BooleanField(default=False, verbose_name='Teacher approved to join institution by the institution administrator?')),
                ('notifyTeacherSignupWeb', models.BooleanField(default=True, verbose_name='Notify of new teacher signup requests at my institution')),
                ('notifyAppointmentApprovedChangedCancelledWeb', models.BooleanField(default=True, verbose_name='Notify of approved, changed, or cancelled appointments')),
                ('notifyAppointmentUpcomingWeb', models.BooleanField(default=True, verbose_name='Notify of upcoming appointments')),
                ('notifyAppointmentRequestedWeb', models.BooleanField(default=True, verbose_name='Notify of student appointment requests')),
                ('notifyAppointmentCommentWeb', models.BooleanField(default=True, verbose_name='Notify of comments')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', website.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Appointment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('startTime', models.DateTimeField(verbose_name='Start time')),
                ('endTime', models.DateTimeField(verbose_name='End time')),
                ('previousStartTime', models.DateTimeField(blank=True, null=True, verbose_name='Previously stored appointment start time')),
                ('previousEndTime', models.DateTimeField(blank=True, null=True, verbose_name='Previously stored appointment end time')),
                ('teacherConfirmed', models.BooleanField(default=False, verbose_name='Teacher approved appointment details')),
                ('studentConfirmed', models.BooleanField(default=True, verbose_name='Student approved appointment details')),
                ('location', models.CharField(max_length=200, verbose_name='Location')),
                ('previousLocation', models.CharField(blank=True, max_length=200, null=True, verbose_name='Previously stored appointment location')),
                ('cancelled', models.BooleanField(default=False, verbose_name='Appointment cancelled')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='student', to=settings.AUTH_USER_MODEL)),
                ('teacher', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='teacher', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Institution',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('approvedStudentEmailDomains', models.CharField(default='[]', max_length=2000)),
                ('approvedTeacherEmailDomains', models.CharField(default='[]', max_length=2000)),
                ('autoApproveTeachers', models.BooleanField(default=False, verbose_name='Automatically approve teachers')),
                ('isVerified', models.BooleanField(default=False, verbose_name='Administrator/institution identity verified?')),
                ('name', models.CharField(max_length=200, verbose_name='Institution name')),
                ('streetAddress', models.CharField(max_length=200, verbose_name='Institution street address')),
                ('cityState', models.CharField(max_length=200, verbose_name='Institution city,state/province')),
                ('zipcode', models.IntegerField(validators=[django.core.validators.MaxValueValidator(99999), django.core.validators.MinValueValidator(1)], verbose_name='Institution zip code')),
                ('timezone', timezone_field.fields.TimeZoneField(default='US/Central')),
            ],
        ),
        migrations.CreateModel(
            name='UserNotification',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('datetime', models.DateTimeField(default=django.utils.timezone.now)),
                ('target_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='target_user', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message', models.TextField(max_length=2000, verbose_name='Comment')),
                ('appointment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='website.Appointment')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='AppointmentNotification',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('datetime', models.DateTimeField(default=django.utils.timezone.now)),
                ('event', models.PositiveSmallIntegerField(choices=[(0, 'Approved'), (1, 'Changed'), (2, 'Cancelled'), (3, 'Upcoming'), (4, 'Requested'), (5, 'Comment')])),
                ('appointment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='website.Appointment')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='user',
            name='institution',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='website.Institution'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
    ]
